const $path = require("path");
const { readdir, readFile, writeFile, posixPath } = require("../util");

function mapClass(name) {
	switch (name) {
	case "CategoryAxis":
	case "CategoryDateAxis":
	case "Axis":
	case "DateAxis":
	case "ValueAxis":
		return `${name}<AxisRenderer>`;
	default:
		return name;
	}
}

async function lookup(classes, dir) {
	const files = await readdir(dir);

	if (files === null) {
		if ($path.extname(dir) === ".ts") {
			const file = await readFile(dir);

			for (let [_, name] of file.matchAll(/public +static +className: *string *= *"([^"]+)"/g)) {
				classes[name] = {
					path: $path.join($path.dirname(dir), $path.basename(dir, ".ts")),
					className: name,
					classType: mapClass(name),
				};
			}
		}

	} else {
		await Promise.all(files.map((file) => {
			return lookup(classes, $path.join(dir, file));
		}));
	}
}

module.exports = async (state) => {
	const classes = {};

	await lookup(classes, state.dir("src", ".internal"));

	const imports = [];
	const properties = [];

	const keys = Object.keys(classes);

	keys.sort((x, y) => {
		if (x === y) {
			return 0;
		} else if (x < y) {
			return -1;
		} else {
			return 1;
		}
	});

	keys.forEach((key) => {
		const { path, className, classType } = classes[key];

		const importPath = posixPath($path.relative(state.dir("src", ".internal", "core"), path));

		imports.push(`import type { ${className} } from "./${importPath}";`);
		properties.push(`\t"${key}": ${classType};`);
	});

	await writeFile(state.dir("src", ".internal", "core", "Classes.ts"), `/**
 * This file is automatically generated by \`yarn generate-classes\`.
 * DO NOT MANUALLY EDIT IT OR YOUR CHANGES WILL BE LOST!
 */

${imports.join("\n")}

export interface IClasses {
${properties.join("\n")}
}
`);
};
